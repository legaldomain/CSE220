Name: Sadaf M. Anis, ID:20101537 sec: 08

#LINEAR ARRAY 

#task 1
#Shift Left k Cells  

def shiftLeft(source, k):
    i = 0
    while i + k <len(source):
        source[i] =source [i+k]
        i = i+1 
    for j in range(i,len(source)):
        source[j]=0
    return source


source = [10, 20, 30, 40, 50, 60]
temp_array_call = shiftLeft(source, 3)
print(temp_array_call) 



#TASK 2
#Rotate Left k cells

def rotateLeft(source,k):
    array_size = len(source)
    for i in range(0,k):
        temp = source [0]
        for j in range(1,array_size):
            source[j - 1] = source[j]
        
        source[array_size - 1] = temp
    
    print(source)
source = [10, 20, 30, 40, 50, 60]
rotateLeft(source, 3)   



#TASK 3

def remove(source,size,idx):
    if size == len(source):
        print("No space in array!")
    if idx < 0 or idx > size :
        print("worng index!")
        return
    i = idx + 1
    while i < size :
        source [i - 1] = source [i]
        i  = i + 1
    source [size - 1] = 0
    return source

source = [10, 20, 30, 40, 50, 0, 0]
print(remove(source, 5, 2))




#TASK 4

def removeAll(source, size , element):
    index = 0
    while index< size:
        if source[index] == element:
            source[index] = 0 
        index = index + 1
        
    index = 0
    i=0
    
    output = [0]*len(source)
    while i < size:
        if source[i]!=0:
            output[index] = source [i]
            index = index + 1
        i = i + 1
    return output    

source = [10, 2, 30, 2, 50, 2, 2, 0, 0]
print(removeAll(source, 7, 2))






#TASK 5

def split(source):
    array = source
    add = 0 
    sub = 0
    same = 0 
    for i in range(0,len(array)-1):
        sub = 0
        add = 0
        
        for i in range(0,i+1):
            add += array[i]
            
        for i in range(i+1,len(array)):
            sub += array[i]
        if sub == add:
            same+=1
    if same ==1:
        print("True")
    else:
        print("False")
    
array = [2, 1, 1, 2, 1]  
split(array)



#TASK 6 

def create_array(n):
    array = [0] * n ** 2
    count = 1
    index = n - 1
    for i in range(0, n):
        temp = index
        value = 1
        for j in range(0, count):
            array[temp] = value
            value = value + 1
            temp = temp - 1
        index = index + n
        count = count + 1

    return array

n = int(input("Enter a number: "))
print(create_array(n))




#TASK 7

def max_bunch(source):
    temp_val = source[0]
    max_bunch = 0
    count = 1
    index = 1
    size = len(source)
    while index < size:
        if source[index] == temp_val:
            count += 1
        else:
            if max_bunch < count:
                max_bunch = count
            temp_val = source [index]
            count = 1
        index += 1
        
    if max_bunch < count:
        max_bunch = count
    if max_bunch ==1:
        return "There is no max bunch"
    else:
        return max_bunch
    
source = [1, 2, 2, 3, 4, 4, 4]
print(max_bunch(source))





#TASK 8 
def repeat(array):
    temp = {}
    for i in range(len(array)):
        if array[i] not in temp:
            
            temp[array[i]] = 0
            
        temp[array[i]]= temp[array[i]] + 1
    for j in temp.values():
        count = 0
        for k in temp.values():
            if j>1 and j==k:
                count= count+1
        if count>= 2:
            return True
    
    if count<2:
        return False
    
print(repeat([3,4,6,3,4,7,4,6,8,6,6]))





#Circular ARRAY 

#TASK 1 PALINDROME

def palindrome(source, begin, size):
    temp = size//2
    count = 0
    out = True
    while count<temp:
        if source[begin] == source[(begin+size-count)%len(source)-1]:
            begin += 1
		count += 1
            size -= 1
            
        else:
            out = False
            break
    return out
a= [10,20,0,0,0,10,20,30] 
print(palindrome(a,5,5))



#TASK 2

def sort(arr):
    for idx in range(len(arr) - 1):
        min_indx = idx
        for j in range(idx + 1, len(arr)):
            if arr[j] < arr[min_indx]:
                min_indx = j
        swap(min_indx, idx, arr)
    return arr

def swap(i, j, arr):
    temp = arr[i]
    arr[i] = arr[j]
    arr[j] = temp

def intersection(cir_array_1, cir_array_2, size_1, size_2, start_1, start_2):
    com_ele = [0] * len(cir_array_1)
    com_idx = 0
    idx_1 = start_1
    com_count = 0
    for i in range(0, size_1):
        idx_2 = start_2
        for j in range(0, size_2):
            if cir_array_1[idx_1] == cir_array_2[idx_2]:
                com_ele[com_idx] = cir_array_1[idx_1]
                com_idx += 1
                com_count += 1
            idx_2 = (idx_2 + 1) % len(cir_array_2)
        idx_1 = (idx_1 + 1) % len(cir_array_1)

   
    output = [0] * com_count
    for i in range(0, com_count):
        if com_ele[i] != 0:
            output[i] = com_ele[i]
        else:
            break
    return sort(output)

#print(intersection([40, 50, 0, 0, 0, 10, 20, 30], [10, 20, 5, 0, 0, 0, 0, 0, 5, 40, 15, 25], 5, 7, 5, 8))
#print(intersection([40,50,0,0,0,10,20,30], [40,50,0,0,0,10,20,30], 5, 5,5,5))



#TASK 3

import random

def musical_chair(n):
    size = len(n)
    while size != 1:
        num_generator = random_num_generator()
        if num_generator != 1:
            temp = n[size - 1]
            i = size - 1
            while i >= 1:
                n[i] = n[i - 1]
                i = i - 1
            n[0] = temp

        else:
            eliminate = size // 2
            n[eliminate - 1] = 0
            i = eliminate
            while i < size:
                n[i - 1] = n[i]
                i = i + 1
            n[size - 1] = 0
            size = size - 1
            print("Players:",n)

    print("Winner is:",n[0])
musical_chair(['1', '2', '3', '4', '5', '6','7'])
musical_chair(['sadaf', 'tom', 'holland', 'jimmy'])
